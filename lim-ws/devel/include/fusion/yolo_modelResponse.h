// Generated by gencpp from file fusion/yolo_modelResponse.msg
// DO NOT EDIT!


#ifndef FUSION_MESSAGE_YOLO_MODELRESPONSE_H
#define FUSION_MESSAGE_YOLO_MODELRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fusion
{
template <class ContainerAllocator>
struct yolo_modelResponse_
{
  typedef yolo_modelResponse_<ContainerAllocator> Type;

  yolo_modelResponse_()
    : Class()
    , xmid()
    , ymid()  {
    }
  yolo_modelResponse_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , xmid(_alloc)
    , ymid(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _Class_type;
  _Class_type Class;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _xmid_type;
  _xmid_type xmid;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _ymid_type;
  _ymid_type ymid;





  typedef boost::shared_ptr< ::fusion::yolo_modelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fusion::yolo_modelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_modelResponse_

typedef ::fusion::yolo_modelResponse_<std::allocator<void> > yolo_modelResponse;

typedef boost::shared_ptr< ::fusion::yolo_modelResponse > yolo_modelResponsePtr;
typedef boost::shared_ptr< ::fusion::yolo_modelResponse const> yolo_modelResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fusion::yolo_modelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fusion::yolo_modelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fusion::yolo_modelResponse_<ContainerAllocator1> & lhs, const ::fusion::yolo_modelResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.xmid == rhs.xmid &&
    lhs.ymid == rhs.ymid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fusion::yolo_modelResponse_<ContainerAllocator1> & lhs, const ::fusion::yolo_modelResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fusion::yolo_modelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion::yolo_modelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion::yolo_modelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion::yolo_modelResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::yolo_modelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::yolo_modelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fusion::yolo_modelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "413fba5d33e359512198fd983aafb45c";
  }

  static const char* value(const ::fusion::yolo_modelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x413fba5d33e35951ULL;
  static const uint64_t static_value2 = 0x2198fd983aafb45cULL;
};

template<class ContainerAllocator>
struct DataType< ::fusion::yolo_modelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion/yolo_modelResponse";
  }

  static const char* value(const ::fusion::yolo_modelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fusion::yolo_modelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] Class\n"
"int64[] xmid\n"
"int64[] ymid\n"
"\n"
;
  }

  static const char* value(const ::fusion::yolo_modelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fusion::yolo_modelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.xmid);
      stream.next(m.ymid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_modelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fusion::yolo_modelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion::yolo_modelResponse_<ContainerAllocator>& v)
  {
    s << indent << "Class[]" << std::endl;
    for (size_t i = 0; i < v.Class.size(); ++i)
    {
      s << indent << "  Class[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Class[i]);
    }
    s << indent << "xmid[]" << std::endl;
    for (size_t i = 0; i < v.xmid.size(); ++i)
    {
      s << indent << "  xmid[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.xmid[i]);
    }
    s << indent << "ymid[]" << std::endl;
    for (size_t i = 0; i < v.ymid.size(); ++i)
    {
      s << indent << "  ymid[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ymid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSION_MESSAGE_YOLO_MODELRESPONSE_H
